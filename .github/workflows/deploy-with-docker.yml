name: Deploy To EC2 With Docker

on:
  push:
    branches: [ feature/deploy-docker#62 ]
  workflow_dispatch: {}

concurrency:
  group: cd-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ap-northeast-2
      ECR_REPO_NAME: dongarium-server
      REMOTE_DIR: /home/ec2-user/dongarium

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Prime Gradle cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Write application.yml from secret
        run: |
          mkdir -p ./src/main/resources
          printf "%s" "${{ secrets.APPLICATION_YML }}" > ./src/main/resources/application.yml

      - name: Build (Gradle)
        run: ./gradlew clean build -x test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR (for build host)
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: docker build -t $ECR_REPO_NAME .

      - name: Tag image for ECR
        run: docker tag $ECR_REPO_NAME:latest ${{ steps.ecr.outputs.registry }}/$ECR_REPO_NAME:latest

      - name: Push image to ECR
        run: docker push ${{ steps.ecr.outputs.registry }}/$ECR_REPO_NAME:latest

      - name: Ensure remote directory structure
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            set -e
            mkdir -p ${{ env.REMOTE_DIR }}/shared
            mkdir -p ${{ env.REMOTE_DIR }}/current

      - name: Upload docker-compose.yml to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "docker-compose.yml"
          target: "${{ env.REMOTE_DIR }}/current"

      # === 배포: credHelpers 방식 (docker login 제거) ===
      - name: Deploy on EC2 (create .env, set credHelpers, compose up)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          # 인스턴스 프로파일이 없다면 아래 envs 3개가 필요합니다
          envs: AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_REGION
          script_stop: true
          script: |
            set -euo pipefail

            # --- (선택) docker/compose 사용 가능 보장 ---
            if ! systemctl is-active --quiet docker; then
              sudo systemctl start docker || true
            fi
            if ! docker compose version >/dev/null 2>&1; then
              if command -v yum >/dev/null 2>&1; then
                sudo yum install -y docker-compose-plugin || true
              elif command -v dnf >/dev/null 2>&1; then
                sudo dnf install -y docker-compose-plugin || true
              fi
              docker compose version || { echo "FATAL: docker compose not available"; exit 1; }
            fi

            # --- AWS 자격증명 (Instance Profile 없을 때만 사용) ---
            export AWS_ACCESS_KEY_ID='${{ secrets.AWS_ACCESS_KEY_ID }}'
            export AWS_SECRET_ACCESS_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}'
            export AWS_REGION='${{ env.AWS_REGION }}'

            # --- credHelpers 설정: 해당 레지스트리에 ecr-login 매핑 ---
            mkdir -p ~/.docker
            cat > ~/.docker/config.json <<EOF
            {
              "credHelpers": {
                "${{ steps.ecr.outputs.registry }}": "ecr-login"
              }
            }
            EOF

            # ecr-credential-helper 설치(없으면)
            if ! command -v docker-credential-ecr-login >/dev/null 2>&1; then
              if command -v yum >/dev/null 2>&1; then
                sudo yum install -y amazon-ecr-credential-helper
              elif command -v dnf >/dev/null 2>&1; then
                sudo dnf install -y amazon-ecr-credential-helper
              fi
            fi

            cd ${{ env.REMOTE_DIR }}

            echo "==> Write/refresh shared .env"
            cat > ${{ env.REMOTE_DIR }}/shared/.env <<'DOTENV'
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}
            DOTENV
            chmod 600 ${{ env.REMOTE_DIR }}/shared/.env

            echo "==> Symlink .env into current"
            ln -sf ${{ env.REMOTE_DIR }}/shared/.env ${{ env.REMOTE_DIR }}/current/.env

            echo "==> Pull latest image (credHelpers auto-auth)"
            docker pull ${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPO_NAME }}:latest

            echo "==> Free port 8080 if occupied"
            sudo fuser -k -n tcp 8080 || true

            echo "==> Restart stack with docker compose"
            cd ${{ env.REMOTE_DIR }}/current
            export ECR_REGISTRY=${{ steps.ecr.outputs.registry }}
            docker compose down || true
            ECR_REGISTRY=${{ steps.ecr.outputs.registry }} docker compose up -d --remove-orphans

            echo "==> Show stack status"
            docker compose ps